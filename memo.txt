<< 기존 내용 >>
8.14 

django-admin startproject ~~~~로 프로젝트를 만드나 앱을 더 효과적으로 구성하기 위해 다른 방법을 쓴다
django-admin startproject config 사용 
config 폴더명 바꾸고 안에 있는 config 폴더와 manage.py 꺼내고 바꾼 폴더 삭제 

8.15 

linker flake8 사용 
model 변경시 makemigrations 생성 그다음 migrate 
사용할 app 만들기 app은 복수형 django-admin startapp ~~~
app안에 urls.py 만듬 

8.16 

models are the data lookslike
config -> settings.py 
AUTH_USER_MODEL = "users.User"

from django.contrib.auth.models import AbstractUser 추가하고 models.Model 대체
app 추가 DJANGO_APPS + PROJECT_APPS = INSTALLED_APPS
database에 추가하고 2가지 옵션 default 설정 or null=TRUE
Pillow is python library to handle image
django_countries 라이브러리 사용
auto_now_add / auto_now 사용
room model 정의 Foreignkey 를 이용하여 user와 연결

8. 17

verbose_name_plural, verbose_name 사용하여 이름 수정
amenities, facilities, house_rules 는 ManyToManyField로 작성 
ordering을 이용하여 보이는 순서 변경 가능

8. 20 
list_display 를 사용하여 admin 페이지 꾸밈
list_filter 를 이용하여 filter 가능 city 나 country 는 마지막쪽에 배치
host__AAA 와 같이 __를 사용하여 Foreignkey 접근 

8. 21
Django shell을 이용하여 query set(객체의 list)을 통해 DB의 객체들에 접근 가능

related_name
related_name 을 통하여 user(1) 입장에서 room(N)을 찾을수도 있음.
room models에서 related_name 을 적어주면 그 이름을 통하여
user에서 room을 역참조 할 수 있음

2) ManyToMany의 관계에서는 그냥 가져오면 됨
room.amenities.all() 처럼

3) query_set manager
all(), filter(), count() 등 사용


9.1
conversation model 에서 
    def __str__(self):
        usernames = []
        for user in self.participants.all():
            usernames.append(user.username)
        return ",  ".join(usernames)
        # 쿼리셋이 배열을 주는데 __str__은 스트링이 필요하므로 join을 써서 string 을 꺼냄

9.2
config settings.py 에 
MEDIA_ROOT = BASE_DIR / "uploads"  # 이걸 추가해주면 이미지가 여기로 저장됨 uploads!!
이미지 경로 지정

URL_conf 변경
urlpatterns에 새로운 static 경로 등록해줌
static 함수를 보면 (url, 사진저장폴더경로) 로 되어있음
이를 통하여 MEDIA_URL로 접근시 비로소 사진에 접근가능

9.3
TabularInline, StackedInline

room에서 저장할 때 대문자로 바꿔서 저장하기 -> save 메서드 오버라이드 
def save(self, *args, **kwargs):
        # self.city = str.capitalize(self.city)  도시 이름의 앞글자를 대문자로
        self.city = (
            self.city.title()
        )  # 도시 이름이 두 단어 이상인 경우도 있기 때문에 이걸 쓰면 됨, upper는 모든 단어가 대문자로 됨
        super().save(*args, **kwargs)

9.7 
django_seed 설치하여 가짜 데이터 만들어줌
lambda 와 faker 를 이용하여 보다 그럴듯한 데이터를 만들어 줄 수 있음
photo 는 조금 더 복잡함 seed_rooms 참조 

9.20
체크인 날짜는 지금, 체크 아웃은 랜덤으로 며칠 뒤로 설정하는데 이걸 하기 위해서 datetime, tiemdelta를 import 함
config urls.py 에 include 추가하고 각 앱마다 urls.py는 없기 때문에 따로 만들어 줘야함
템플릿 폴더 만든 후 setting.py DIR 에 경로를 추가해줘야함
https://docs.djangoproject.com/ko/3.2/howto/overriding-templates/#overriding-from-the-project-s-templates-directory < 장고 공식문서
template 에 context를 통해 객체 전달 가능 딕셔너리 형태로 하면 괜찮은듯, 그리고 template에서 {{}}를 통해
꺼내 쓸 수 있고 {} 를 통해 파이썬 문법 사용 가능 
base.html header.html footer.html 구분하기, 이렇게해야 css 할 때도 그렇고 편리함

#11.1

room view 에서 방을 가져오는데 
page = int(request.GET.get("page", 1))
    page_size = 10
    limit = page_size * page
    offset = limit - page_size
    all_rooms = models.Room.objects.all()[offset:limit]

를 사용하여 http://127.0.0.1:8000/?page=★ 별부분에 숫자가 들어옴에 따라 10개씩 보이게 코드를 짯는데
나는 저번 프로젝트 때 paginator 를 사용했는데 이런 방법도 있다는 것에 놀람
다만 page = 별부분에서 입력이 없을 때 (오류), 숫자가 매우 클 때 (오류 X)도 생각해봐야한다.

#11.2

page?=★ 에 각 <a href>를 이용해 작동하게 만들었다. 
다만 여기서 문제점은 이전 페이지 다음 페이지로 이동하는 것과 이전, 다음 페이지가 있나 확인할 방법을 생각해줘야 한다는 것이다.

#11.3 
previous 와 next 까지 수동으로 만들고 처음과 마지막 페이지에서 예외처리를 하였다
paginator만 사용했었는데 이런식으로 수동적으로 만들어 줄 수 있다는 게 놀라웠다.

9. 25
#11.4~
paginator 이용하면 더 쉽고 빠르게 페이지 정리 가능
get_page vs page 
나는 get_page가 더 편해보임 (page는 에러를 따로 관리해줄수 있음)
try_except 을 통해서 예외처리 해줄수 있음 (지나가면서 본적만 있고 처음 해봤는데 매우 유용
-> Exception을 통해 퉁치기가 가능하나 예외의 경우도 나눠서 처리해주는 게 좋다는게 나중에 참고하면 더 좋은 개발이 될 것 같음
ListView 사용하는 걸 보고 조금 충격받았다. 단순하면서도 여긴 다시 봐야할 것 같다 
css 부분을 어떻게 해결할지도 궁굼하다

9. 26
#11.7 ~
ListView 좋은듯 
url 이해중 pk를 통해 id 받아서 이동가능
get_absolute_url 어떤 url을 갖고있던 지정하는곳으로 이동 (어드민페이지에서!)




<< 다시 처음부터 공부 시작! 목표 2/10 전까지 끝내기 >>

#2022-01-25
    pipenv 를 통해서 버전이 다르게 설정해서 관리 가능
    pipenv shell 명령을 통해 버블 안으로 들어간다.
    Linter는 에러감지용으로 사용
    settings.py TIME_ZONE = "Asia/Seoul"로 바꾼다
    python manage.py makemigrations 을 치면 장고가 우리의 모델을 확인하고 migration 파일을 만든다,
    폴더안에서 그러나 config의 밖에서 django-admin startapp 을 통해 app 생성 (복수형이어야함!!!)
    각종 app들에 urls.py 추가
    default=false 비어있으면 false야 or null=true 비어있어도 괜찮아 중 선택
    charfield는 chocies를 통해 customizing이 가능하다
    blank=true는 form에서 사용가능
    우리가 만든 유저를 쓸려고 settings.py에서 AUTH_USER_MODEL ="users.User" 추가했음
    만든 앱 사용하기 위해서는 settings.py에 추가해야함 
    
#2022-01-26
    related_name 은 타깃을 위한 것 Foreignkey부분 위주로 자세히 볼 필요 있음
    def 를 통한 확인 함수 
    7~9 skip
    templates 장고에게 알려주기위해 settings.py DIRS에 추가
    에러페이지에서 return 이 아닌 raise로 Http404 이용해서 해결해준다
    htp404 페이지 확인은 
    DEBUG = False
    ALLOWED_HOSTS = "*"  로 바꿔줘야 가능하다
    404.html은 다른 폴더에 있으면 안됨 templates 바로 아래에 있어야 한다
    DetailView를 사용하면 장고는 기본적으로 url argument로 pk를 사용한다

#2022-01-27
    {% if amenity.pk|slugify in s_amenities  %}   <!--slugify는 모두다 string으로 바꿈 안쓰면 pk는 정수 s_amenities는 스트링이라 작동안됨
    나머지 체크 박스랑 label사용 폼으로 데이터 전달하는 과정
    search.html에서 instant랑 super_host는 value를 통해 값을 받는게아니라  if 사용해서 체크 된거 확인 
    필터는 필요 없는 것도 없애는 과정도 필요 예를들어 룸타입이 없으면 검색이 가능하면 안됨
    amenities facilities는 조건부 걸어서 필터 해줌 주의깊게 보자

#2022-01-28
    기존에 만든 폼을 장고폼을 이용해서 더 쉽게 구현 가능
    forms.py를 만들고 from django import forms 하고 forms.py 보면 쉽게 만드는 걸 확인가능
    widget를 이용하여 폼으 모양도 변경가능 장고 공식문서 form 부분 참조
    #13.7~13.8 영상까지 하면 폼은 완성 근데 문제는 선택한 결과를 아직 정하지는 않음
    views.py def search 안 form = forms.SearchForm 에 request.GET만 추가하면 form이 기억한다!!
    로그인은 기존에 있는 회원인지 아이디 비번 맞는지 
    user form보면 어케 검증하는지 확인가능 clean 사용 그리고 예외처리에서 #raise 에러 한곳에서 에러가 뜬다!!
    check_password 사용하려면 user를 붙여야한다
    cleaned_data를 return 해야한다 clean을 썻을경우
    FormView이용해서 로그인 쉽게 만들수있다
     https://ccbv.co.uk/projects/Django/4.0/django.views.generic.edit/FormView/ 및 장고 문서 loginview 참고

#2022-01-29
    modelform의 사용
    modelform은 자체 save clean 등이 있어서 좋다 + 유니크한 값 넣기 가능
    장고 공식문서 modelform 참고 commit=False는 object는 생성하지만 database에 올리지 말라는 뜻

#2022-01-30
    장고는 email 검증을 위한 기능이 있다 send email django 로 검색해보자
    www.mailgun.com 가입하고 settings.py 에서 작업
    # maligun 가입하고 sending-> domain settingss-> SMTP credentials -> add new SMTP user해서 password구함
    #다만 이대로 깃에 올리면 비밀번호가 올라가니까 올리면 안됨
    그래서 pipev 안에서 dotenv를 설치하고 .env파일에 숨기고 싶은걸 넣고 원래 부분에
    EMAIL_HOST_USER = os.environ.get("MAILGUN_USERNAME")
    EMAIL_HOST_PASSWORD = os.environ.get("MAILGUN_PASSWORD")
    요런식으로 접근하게 설정해둔다
    OAuth이용해서 이제 깃헙,카카오 로그인 만든다
    github settings -> developer settings 
    requests library 다운 말그대로 request.get request.post 등에 사용

#2022-01-31
    from django.core.files.base import ContentFile 사용 (photo 가져오기에)
    sign email error 못고치겠다;;;
    일단 디자인 시작
    tailwind css 사용!! built with tailwind 검색해보자
    assets는 프로그래머를 위한거 static은 브라우저를 위한 것
    style.scss를 style.css에 반영하고 싶다면 npm run css명령어 실행
    
#2022-02-01
    css 시작 rem 과 % 가 있다.
    rem = root em을 의미  (em 가장 가까운 font-size와 같다 rem은 가장 가까운 font-size와 상관없음 -> root-font-size와 관련있음)

#2022-02-02
    css작업을 위한 각종 seed를 내가 삭제해서 다시 만들어야해서 장고 seed 복습 (#9.0 ~ #9.8)    
    아무 app안에 management 폴더 만들고 __init__.py 만듬
    command도 만들고 그안에도  __init__.py 만듬 (구조는 참조해서보자)
    .py 만들고 BaseCommand import 하고 def add_arguments def handle 추가하고 이거 만들면 된다

#2022-02-03
    css 확장가능. tailwind.config.js 파일에서 작업해서 확장
    사진 가져올때 unsplash.com 개꿀이다여기 room_html에서 적용하는 코드 보면 됨
    truncate 하면 아래로 안내려가고 한줄로함
    overflow-hidden 하면 옆으로 침범안하고 그 칸에서끝
    메일건 sending overview 에 email-address등록하고 인증하고 이걸로 회원가입하니 오류안뜬다!

#2022-02-04
    메시지 추가 장고 문서 message framework검색
    animation: messageFadeIn 5s ease-in-out forwards; 에서 ease-in-out은 애니메이션에서 느리게 시작 중간에 가장 빨라지고 다시 느려짐
    forwards 는 마지막 값을 기억하게 함 여기서 opacity가 0 -> 1 -> 0 으로 변하는데 이 0 값을 계속 기억하게함
    detailview에서 profile을 누르면 로그인한 사람이 아니라 디테일페이지 주인의 profile로 가게됨,,
    이것은 detailview에서 user를 받을 때 로그인한 유저가 아니라 방의 유저를 받기 때문 따라서
    @@@@ DetailView에서 타고 들어가다보면 SingleObjectMixin 이라는게 있는데 여기를 잘보면
    context_object_name = None 라는게 있고 이 코드가 로그인 했던 유저가 아니라 뷰에서 찾았던 유저 객체를 가르키는 방법을 바꿀수 있게 한다
    
#2022-02-05
    프로필 바꾸기 및 정보, 비밀번호 바꾸기
    비밀번호의 경우 이메일로 가입된경우만 바꾸게 예외처리 해줘야한다.
    UpdateView 정보바꾸는데 사용 PasswordChangeView 비밀번호 바꾸는데 사용
    https://ccbv.co.uk/projects/Django/4.0/django.contrib.auth.views/PasswordChangeView/ 문서 참고
    우리가 하는건 이제 바꿀 때 떡하니 빈칸만 있어서 label을 달아줄려고하는데 form class를 만들어서 하는 방법과
    문서에 있는 get_form을 이용하는 방법이있다
    SuccessMessageMixin을 이용하여 성공시(여기서는 프로필 수정) 메시지가 나오게 할 수 있다.
    Users 안에 mixins.py를 만들었다. url을 알아도 이동못하게 하기위해 (악용될경우대비)

#2022-02-09
    mixin 마무리 room 시작
    복수/단수 (bed/beds) 해결위해 pluralize라는게 있다
    ul태그 추가시 테일윈드가 각 점을 없애줌
    user_avatar의 h_and_w 로 default를 주고 부를 때 값 지정해주는 부분 좋은 스킬인듯

#2022-02-14
    CreateView를 사용하는데 Form을 새로 만들어야한다면 예를들어 사진추가 이럴경우 는 FormView를 사용
    session 사용! user_views.py 참고,, 유저 구분위해사용
    is_hosting 같은걸 다 모델에 넣으면 모델이 너무 커짐 session 이용함으로서 이런거 해결가능
    save_m2m() 을 해야 manytomany field 저장가능 (새로운 방 추가시) 근데 form.save 이후에 이걸써야함 공식문서참고

#2022-02-17
    Calendar 시작 cal.py에 달력에 대한 클래스 만들고 room model에 import해서 씀
