8.14 

django-admin startproject ~~~~로 프로젝트를 만드나 앱을 더 효과적으로 구성하기 위해 다른 방법을 쓴다
django-admin startproject config 사용 
config 폴더명 바꾸고 안에 있는 config 폴더와 manage.py 꺼내고 바꾼 폴더 삭제 

8.15 

linker flake8 사용 
model 변경시 makemigrations 생성 그다음 migrate 
사용할 app 만들기 app은 복수형 django-admin startapp ~~~
app안에 urls.py 만듬 

8.16 

models are the data lookslike
config -> settings.py 
AUTH_USER_MODEL = "users.User"

from django.contrib.auth.models import AbstractUser 추가하고 models.Model 대체
app 추가 DJANGO_APPS + PROJECT_APPS = INSTALLED_APPS
database에 추가하고 2가지 옵션 default 설정 or null=TRUE
Pillow is python library to handle image
django_countries 라이브러리 사용
auto_now_add / auto_now 사용
room model 정의 Foreignkey 를 이용하여 user와 연결

8. 17

verbose_name_plural, verbose_name 사용하여 이름 수정
amenities, facilities, house_rules 는 ManyToManyField로 작성 
ordering을 이용하여 보이는 순서 변경 가능

8. 20 
list_display 를 사용하여 admin 페이지 꾸밈
list_filter 를 이용하여 filter 가능 city 나 country 는 마지막쪽에 배치
host__AAA 와 같이 __를 사용하여 Foreignkey 접근 

8. 21
Django shell을 이용하여 query set(객체의 list)을 통해 DB의 객체들에 접근 가능

related_name
related_name 을 통하여 user(1) 입장에서 room(N)을 찾을수도 있음.
room models에서 related_name 을 적어주면 그 이름을 통하여
user에서 room을 역참조 할 수 있음

2) ManyToMany의 관계에서는 그냥 가져오면 됨
room.amenities.all() 처럼

3) query_set manager
all(), filter(), count() 등 사용


9.1
conversation model 에서 
    def __str__(self):
        usernames = []
        for user in self.participants.all():
            usernames.append(user.username)
        return ",  ".join(usernames)
        # 쿼리셋이 배열을 주는데 __str__은 스트링이 필요하므로 join을 써서 string 을 꺼냄

9.2
config settings.py 에 
MEDIA_ROOT = BASE_DIR / "uploads"  # 이걸 추가해주면 이미지가 여기로 저장됨 uploads!!
이미지 경로 지정

URL_conf 변경
urlpatterns에 새로운 static 경로 등록해줌
static 함수를 보면 (url, 사진저장폴더경로) 로 되어있음
이를 통하여 MEDIA_URL로 접근시 비로소 사진에 접근가능

9.3
TabularInline, StackedInline

room에서 저장할 때 대문자로 바꿔서 저장하기 -> save 메서드 오버라이드 
def save(self, *args, **kwargs):
        # self.city = str.capitalize(self.city)  도시 이름의 앞글자를 대문자로
        self.city = (
            self.city.title()
        )  # 도시 이름이 두 단어 이상인 경우도 있기 때문에 이걸 쓰면 됨, upper는 모든 단어가 대문자로 됨
        super().save(*args, **kwargs)

9.7 
django_seed 설치하여 가짜 데이터 만들어줌
lambda 와 faker 를 이용하여 보다 그럴듯한 데이터를 만들어 줄 수 있음
photo 는 조금 더 복잡함 seed_rooms 참조 

9.20
체크인 날짜는 지금, 체크 아웃은 랜덤으로 며칠 뒤로 설정하는데 이걸 하기 위해서 datetime, tiemdelta를 import 함
config urls.py 에 include 추가하고 각 앱마다 urls.py는 없기 때문에 따로 만들어 줘야함
템플릿 폴더 만든 후 setting.py DIR 에 경로를 추가해줘야함
https://docs.djangoproject.com/ko/3.2/howto/overriding-templates/#overriding-from-the-project-s-templates-directory < 장고 공식문서
template 에 context를 통해 객체 전달 가능 딕셔너리 형태로 하면 괜찮은듯, 그리고 template에서 {{}}를 통해
꺼내 쓸 수 있고 {} 를 통해 파이썬 문법 사용 가능 
base.html header.html footer.html 구분하기, 이렇게해야 css 할 때도 그렇고 편리함

#11.1

room view 에서 방을 가져오는데 
page = int(request.GET.get("page", 1))
    page_size = 10
    limit = page_size * page
    offset = limit - page_size
    all_rooms = models.Room.objects.all()[offset:limit]

를 사용하여 http://127.0.0.1:8000/?page=★ 별부분에 숫자가 들어옴에 따라 10개씩 보이게 코드를 짯는데
나는 저번 프로젝트 때 paginator 를 사용했는데 이런 방법도 있다는 것에 놀람
다만 page = 별부분에서 입력이 없을 때 (오류), 숫자가 매우 클 때 (오류 X)도 생각해봐야한다.

#11.2

page?=★ 에 각 <a href>를 이용해 작동하게 만들었다. 
다만 여기서 문제점은 이전 페이지 다음 페이지로 이동하는 것과 이전, 다음 페이지가 있나 확인할 방법을 생각해줘야 한다는 것이다.

#11.3 
previous 와 next 까지 수동으로 만들고 처음과 마지막 페이지에서 예외처리를 하였다
paginator만 사용했었는데 이런식으로 수동적으로 만들어 줄 수 있다는 게 놀라웠다.

9. 25
#11.4~
paginator 이용하면 더 쉽고 빠르게 페이지 정리 가능
get_page vs page 
나는 get_page가 더 편해보임 (page는 에러를 따로 관리해줄수 있음)
try_except 을 통해서 예외처리 해줄수 있음 (지나가면서 본적만 있고 처음 해봤는데 매우 유용
-> Exception을 통해 퉁치기가 가능하나 예외의 경우도 나눠서 처리해주는 게 좋다는게 나중에 참고하면 더 좋은 개발이 될 것 같음
ListView 사용하는 걸 보고 조금 충격받았다. 단순하면서도 여긴 다시 봐야할 것 같다 
css 부분을 어떻게 해결할지도 궁굼하다

9. 26
#11.7 ~
ListView 좋은듯 
url 이해중 pk를 통해 id 받아서 이동가능